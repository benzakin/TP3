{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","isWeb3Error","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","setState","runInit","alert","error","methods","owner","call","contractOwner","getCurrentWorkflowStatus","currentWorkflowStatus","getProposals","proposals","getVotersAdresses","votersAdresses","connectedAccount","contractInformation","winningProposal","getUIWorkflowStatus","on","handleAccountsChanged","events","WorkflowStatusChange","event","handleWorkflowStatusChange","VoterRegistered","handleVoterAdded","ProposalRegistered","handleProposalRegistered","Voted","handleVoted","setAccountInformation","isOwner","canVote","isRegistered","hasVoted","getVoter","from","then","response","voterInformation","accountInformation","account","UIWorkflowStatus","newAccounts","reloadedAccounts","returnValues","newStatus","listAllProposals","registeringUsers","value","addVoter","trim","send","openProposaRegistration","startProposalsRegistering","addProposal","description","proposal","closeProposalRegistrationn","endProposalsRegistering","openVote","startVotingSession","closeVote","endVotingSession","voteForProposal","index","setVote","target","catch","processVoteResults","tallyVotes","this","divConnection","Alert","variant","divConnectionInfo","isVoter","isRegistrationOpen","isVoteOpen","isVoteTallied","divIsOwner","className","uiStatus","divAdminButtons","Card","border","Body","Title","Button","onClick","divAddVoter","Stack","direction","gap","Form","Group","Control","type","id","ref","input","divRegistreredVoters","ListGroup","Item","Table","hover","map","key","toString","divAddProposal","placeholder","divProposals","prop","tdButtonVote","divResult","Accordion","eventKey","align","Header","style","width","Text","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ee56c32.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Accordion from 'react-bootstrap/Accordion';\nimport Alert from 'react-bootstrap/Alert';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Stack from 'react-bootstrap/Stack';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\n\nimport \"./App.css\";\nimport ListGroupItem from \"react-bootstrap/esm/ListGroupItem\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, isWeb3Error:null };\n\n  componentDidMount = async () => {\n   \n    let isWeb3Error;\n    try {\n      \n      isWeb3Error = false;\n\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts (Metamask).\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the Voting contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];       \n\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n        \n      ); \n\n      // Set web3, accounts, and contract to the state, and then proceed with runInit \n      this.setState({ web3, accounts, contract: instance, isWeb3Error }, this.runInit);\n    \n    } catch (error) {      \n      isWeb3Error = true\n      this.setState({isWeb3Error})\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );     \n      console.error(error);\n    }\n  };\n\n  //Initilazation\n  runInit = async() => {\n    const { contract , accounts} = this.state;\n\n    // Get contract info     \n    const contractOwner = await contract.methods.owner().call(); // The owner\n    \n    const currentWorkflowStatus = await contract.methods.getCurrentWorkflowStatus().call(); // current workflow status\n    const proposals = await contract.methods.getProposals().call(); // proposals \n    const votersAdresses = await contract.methods.getVotersAdresses().call(); // addresses on wihtelist\n    let winningProposal = null;\n\n    const connectedAccount = accounts[0];\n    const isOwner = connectedAccount === contractOwner ? true : false;\n   // const isVoter = connectedAccount === contractOwner ? true : false;\n\n   \n    if(!isOwner)\n    {\n      //winningProposal = await contract.methods.getWinningProposal().call(); // the winning proposal\n    }\n\n    let contractInformation = {\n        contractOwner: contractOwner,\n        currentWorkflowStatus: currentWorkflowStatus,\n        proposals: proposals,\n        votersAdresses: votersAdresses,\n        winningProposal: winningProposal,        \n    };\n    \n    this.setState({ contractInformation });\n    //this.setAccountInformation();\n    this.getUIWorkflowStatus();\n\n    // ********** Events management **********\n    window.ethereum.on('accountsChanged', (accounts) => this.handleAccountsChanged(accounts));\n    contract.events.WorkflowStatusChange().on('data', (event) => this.handleWorkflowStatusChange(event))\n                                          .on('error', (error) => console.error(error));\n    contract.events.VoterRegistered().on('data', (event) => this.handleVoterAdded(event))\n                                     .on('error', (error) => console.error(error));\n    contract.events.ProposalRegistered().on('data', (event) => this.handleProposalRegistered(event))\n                                        .on('error', (error) => console.error(error));     \n    contract.events.Voted().on('data', (event) => this.handleVoted(event))\n                           .on('error', (error) => console.error(error));\n  }\n\n  // Connected account (Need to be call at start and when user change metamastk account !)\n  setAccountInformation = async() => {\n    const { accounts, contract, contractInformation, web3 } = this.state;\n    const connectedAccount = accounts[0];\n    const isOwner = connectedAccount === contractInformation.contractOwner ? true : false;\n\n    let canVote = false;\n    let isRegistered = false;\n    let hasVoted = false; \n\n    if (!isOwner)\n    {\n     const voterInformation = await contract.methods.getVoter(connectedAccount).call({ from: connectedAccount }).then(response => {\n      alert(response);     \n    });\n\n     canVote = voterInformation && voterInformation.isRegistered && !voterInformation.hasVoted;\n     isRegistered = voterInformation && voterInformation.isRegistered;\n     hasVoted = voterInformation && voterInformation.hasVoted; \n    }\n   \n    let accountInformation = {\n      account: connectedAccount,\n      canVote: canVote,\n      hasVoted: hasVoted,\n      isOwner: isOwner,\n      isRegistered: isRegistered,     \n    };\n\n    this.setState({ accountInformation });   \n  };\n\n  \n  getUIWorkflowStatus = async() => {\n    const { contractInformation } = this.state;\n\n    let UIWorkflowStatus\n    switch (contractInformation.currentWorkflowStatus) {\n      case '0':\n        UIWorkflowStatus = \"RegisteringVoters\";\n        break;\n      case '1':\n        UIWorkflowStatus = \"ProposalsRegistrationStarted\";\n        break;\n      case '2':\n        UIWorkflowStatus = \"ProposalsRegistrationEnded\";\n        break;\n      case '3':\n        UIWorkflowStatus = \"VotingSessionStarted\";\n        break;\n      case '4':\n        UIWorkflowStatus = \"VotingSessionEnded\";\n        break;\n      case '5':\n        UIWorkflowStatus = \"VotesTallied\";\n        break;\n    }\n    this.setState({ UIWorkflowStatus });\n\n  }\n\n  // ========== Handles events ==========\n  \n  // Account change on Metamask\n  handleAccountsChanged = async(newAccounts) => {\n    const { web3 } = this.state;\n    const reloadedAccounts = await web3.eth.getAccounts();   \n    this.setState({ accounts: reloadedAccounts });\n    this.setAccountInformation();\n    console.log(\"handleAccountsChanged\");\n}\n\n  // Workflow change\n  handleWorkflowStatusChange = async(event) => {  \n    const { contract, contractInformation } = this.state;\n    contractInformation.currentWorkflowStatus = event.returnValues.newStatus;    \n    this.getUIWorkflowStatus();\n    console.log(\"handleWorkflowStatusChange\");\n  }\n\n  //Voter added\n  handleVoterAdded = async(event) => {    \n    const { contract, contractInformation } = this.state;\n    contractInformation.votersAdresses = await contract.methods.getVotersAdresses().call(); \n    this.setState({ contractInformation });    \n    console.log(\"handleVoterAdded\");\n  }\n\n\n  //Proposal registred\n  handleProposalRegistered = async(event) => {    \n    this.listAllProposals();\n    console.log(\"handleProposalRegistered\");\n  }\n\n\n  //Vote done\n  handleVoted = async(event) => {    \n    this.listAllProposals();\n    console.log(\"handleVoted\");\n  }\n\n// ============== Contract interactions =================\n\n  // Add account\n  registeringUsers = async () => {\n    try {\n\n      const { accounts, contract } = this.state;\n      const address = this.address.value;\n      console.log(\"addVoter\");\n      await contract.methods.addVoter(address.trim()).send({ from: accounts[0] }).then(response => {\n        alert('Enregistrement réussi', \"ENREGISTREMENT\");\n        this.address.value = '';\n      })\n    } catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n  // Open registration\n  openProposaRegistration = async () => {\n    try {\n      const { accounts, contract } = this.state;\n      await contract.methods.startProposalsRegistering().send({ from: accounts[0] }).then(response => {\n        alert('Ouverture des enregistrements pour propositions', \"SESSION PREOPOSITIONS\");\n      });\n    } catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n  // Make a proposal\n  addProposal = async() => {\n    try{\n      const { accounts, contract } = this.state;\n      const description = this.proposal.value;\n\n      await contract.methods.addProposal(description).send({ from: accounts[0] }).then(response =>{\n        alert(\"Proposition enregistrée\",\"ENREGISTREMENT\");\n      })\n    }catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n  //List all proposals\n  listAllProposals = async () => {\n    try {\n      const { contract, contractInformation } = this.state;\n      contractInformation.proposals = await contract.methods.getProposals().call();\n      this.setState({ contractInformation });\n      this.setAccountInformation();\n    } catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n  //Close proposal session\n  closeProposalRegistrationn = async () => {\n    try {\n      const { accounts, contract } = this.state;\n      await contract.methods.endProposalsRegistering().send({ from: accounts[0] }).then(response => {\n        alert('Fermeture des enregistrements pour propositions', \"SESSION PREOPOSITIONS\");\n      });\n    } catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n  //Open vote session\n  openVote = async() => {\n    try{\n      const { accounts, contract } = this.state;\n      await contract.methods.startVotingSession().send({ from: accounts[0] }).then(response => {\n        alert('Ouverture du VOTE', \"VOTE\");\n      });\n\n    }catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n  //Close vote session\n  closeVote = async () => {\n    try {\n      const { accounts, contract } = this.state;\n      await contract.methods.endVotingSession().send({ from: accounts[0] }).then(response => {\n        alert('Fermeture du VOTE', \"VOTE\");\n      });\n    } catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n  //Vote action\n  voteForProposal = async (index) => {\n    try {\n      //alert(index.target.value);\n      const { accounts, contract } = this.state;\n      await contract.methods.setVote(index.target.value).send({from: accounts[0]}).then(response => {\n       alert(\"Vote effectué\");\n      }).catch(error => {\n        alert(\"ERREUR:\"+error);\n      });\n    } catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n  // Process vote result\n  processVoteResults = async () => {\n    try {\n      const { accounts, contract } = this.state;\n      await contract.methods.tallyVotes().send({ from: accounts[0] }).then(response => {\n        alert('Résultat du vote disponible !', \"VOTE\");\n      });\n    } catch (error) {\n      alert(error, \"ERREUR\");\n    }\n  }\n\n// **************************************** Render ****************************************\n\n//a tester\n//https://www.npmjs.com/package/react-toastify \n\n  render() {\n    const { accounts, accountInformation, contractInformation, UIWorkflowStatus, isWeb3Error } = this.state;\n\n    \n    //Loading\n    let divConnection = <Alert variant='info'>\n      Loading Web3, accounts, and contract...\n    </Alert>   \n    if (!this.state.web3) {\n      return divConnection\n    }\n    \n    // ======== DEFINE ALL DIV SECTIONS ========\n\n    //DIV User connection info \n    let divConnectionInfo = accountInformation ? \n      accountInformation.account + \" \": \n      \"Veuillez connecter un compte\"\n    \n    //Contract info\n    let isOwner = (accountInformation && accountInformation.isOwner)\n    if (contractInformation!=null)\n      isOwner= accounts[0] === contractInformation.contractOwner ? true : false;\n    \n    let isVoter = (accountInformation && accountInformation.canVote)    \n    let isRegistrationOpen = (UIWorkflowStatus!=null && UIWorkflowStatus === \"ProposalsRegistrationStarted\") ? true : false\n    let isVoteOpen = (UIWorkflowStatus!=null && UIWorkflowStatus === \"VotingSessionStarted\") ? true : false\n    let isVoteTallied = (UIWorkflowStatus!=null && UIWorkflowStatus === \"VotesTallied\") ? true : false\n    \n    //DIV owner\n    let divIsOwner = <span className='badge bg-success'>owner</span>\n\n    //DIV workflowStatus\n    let uiStatus = UIWorkflowStatus\n    \n    //DIV Admin buttons\n    let divAdminButtons = <Card border=\"primary\"><Card.Body>\n      <Card.Title>Menu admin</Card.Title>\n      \n      <Button variant=\"primary\" onClick={this.openProposaRegistration}>Ouvrir la session</Button>{' '}\n      <Button variant=\"primary\" onClick={this.closeProposalRegistrationn}>Fermer la session</Button>{' '}\n      <Button variant=\"primary\" onClick={this.openVote}>Ouvrir le vote </Button>{' '} \n      <Button variant=\"primary\" onClick={this.closeVote}>Fermer le vote</Button>{' '}\n      <Button variant=\"success\" onClick={this.processVoteResults}>Resultat</Button>{' '}\n    </Card.Body></Card>\n\n    //DIV Add Voters\n    let divAddVoter =  \n    <Stack direction=\"horizontal\" gap={3}>\n      <Form.Group>\n        <Form.Control type=\"text\" id=\"address\"\n          ref={(input) => { this.address = input }}\n        />\n      </Form.Group>\n      <Button onClick={this.registeringUsers}  >Ajouter un compte</Button>\n      </Stack>\n    \n    //DIV Registered voters\n    let divRegistreredVoters = <ListGroup variant=\"flush\">       \n      <ListGroup.Item>      \n        <Table hover>      \n          <tbody>\n            {contractInformation && typeof (contractInformation.votersAdresses) !== 'undefined' && contractInformation.votersAdresses !== null &&\n              contractInformation.votersAdresses.map((a) => <tr key={a.toString()}><td>{a}</td></tr>)\n            }\n          </tbody>\n        </Table>\n      </ListGroup.Item>\n    </ListGroup>\n\n    //DIV Add proposal\n    let divAddProposal = <Stack direction=\"horizontal\" gap={3}><Form className=\"w-50\"> \n      <Form.Control type=\"text\" id=\"proposal\" placeholder=\"Votre proposition\"\n        ref={(input) => { this.proposal = input }}\n      />        \n    </Form>\n    <Button onClick={this.addProposal}  >Enregistrer</Button>\n    </Stack>\n\n    //DIV list proposals\n    const tdButtonVote = (index) => {\n      if (isVoter && isVoteOpen) {\n        return <>\n                 <Button onClick={ this.voteForProposal } value={index}>Voter</Button>&nbsp;\n               </>;\n      }else {\n        return <></>;\n      }\n    }\n    let divProposals = <ListGroup>\n      <ListGroup.Item>\n        <Table hover>\n          <tbody>\n            {contractInformation && contractInformation.proposals != null &&\n              contractInformation.proposals.map((prop, index) => \n              <tr key={index}>               \n              <td>#{index} - {prop.description} ({prop[1]} vote(s))</td>\n              <td>{tdButtonVote(index)}</td>\n              </tr>)\n            }\n          </tbody>\n        </Table>\n      </ListGroup.Item>\n    </ListGroup>\n    \n    //DIV divResult\n    let divResult = <Accordion.Item eventKey=\"2\"align=\"center\" >\n      <Accordion.Header>Résultat du vote</Accordion.Header>\n      <Accordion.Body>\n        <Card style={{ width: '18rem' }}>\n          <Card.Body>\n            <Card.Title>Résultat du vote</Card.Title>\n            <Card.Text>\n           {contractInformation !=null  && contractInformation.winningProposal? \n           contractInformation.winningProposal[0] + \"(\" + contractInformation.winningProposal[1] + \" votes)\": \n           \"\"}            \n            </Card.Text>\n          </Card.Body>\n        </Card>\n      </Accordion.Body>\n    </Accordion.Item>\n\n\n\n\n    // ======== DISPLAY RENDER ========\n    return (\n      <div className=\"App\">        \n        <h1>VOTING DAPP</h1>\n        <h2>ALYRA TP 3 </h2>\n\n        {/* Header*/}\n        <Card>\n          <Card.Header>Status actuel : {uiStatus}</Card.Header>\n          <Card.Body>\n            <Card.Title>{divConnectionInfo}{isOwner ? divIsOwner\n              :\n              \"\"}</Card.Title>\n            <Card.Text>\n              {isOwner ?\n                \"Vous êtes l'administrateur, vous gérez les votes\" :\n                \"Le système de vote est géré par un administrateur\"}\n            </Card.Text>\n            {isOwner ? divAdminButtons : \"\"}\n          </Card.Body>\n        </Card>\n\n        {/* Voters list section */}\n        <Accordion >\n        {isVoteTallied ? divResult:null}       \n          <Accordion.Item eventKey=\"0\">\n            <Accordion.Header>Liste des votants</Accordion.Header>\n            <Accordion.Body>\n              {isOwner ? divAddVoter : \"\"}\n              {divRegistreredVoters}\n            </Accordion.Body>\n          </Accordion.Item>\n          <Accordion.Item eventKey=\"1\">\n            <Accordion.Header>Liste des propositions</Accordion.Header>\n            <Accordion.Body>\n              {isVoter && isRegistrationOpen ? divAddProposal : \"\"}\n              {divProposals}\n            </Accordion.Body>\n          </Accordion.Item>           \n        </Accordion>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}