{"version":3,"sources":["getWeb3.js","component/AddressesVoters.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","AddressesVoters","props","ListGroup","variant","Item","Table","hover","this","contractInformation","votersAdresses","map","key","toString","React","Component","App","state","accounts","contract","isWeb3Error","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","instance","Contract","abi","address","setState","alert","error","runInit","methods","owner","call","contractOwner","getCurrentWorkflowStatus","currentWorkflowStatus","getProposals","proposals","getVotersAdresses","winningProposal","connectedAccount","isVoter","indexOf","getWinningProposal","isVoteOpen","setAccountInformation","getUIWorkflowStatus","on","handleAccountsChanged","events","WorkflowStatusChange","event","handleWorkflowStatusChange","VoterRegistered","handleVoterAdded","ProposalRegistered","handleProposalRegistered","Voted","handleVoted","isOwner","voterInformation","canVote","isRegistered","hasVoted","getVoter","from","accountInformation","account","UIWorkflowStatus","newAccounts","reloadedAccounts","returnValues","_newStatus","listAllProposals","registeringUsers","value","addVoter","trim","send","then","response","message","openProposaRegistration","startProposalsRegistering","addProposal","description","proposal","closeProposalRegistrationn","endProposalsRegistering","startVotingSession","endVotingSession","voteForProposal","index","setVote","target","endVotesTallied","divConnection","Alert","divConnectionInfo","isRegistrationOpen","uiStatus","className","divOpenProposaRegistrationButtons","Button","onClick","divCloseProposalRegistrationButtons","divStartVotingSessionButtons","divEndVotingSessionButtons","divEndVotesTalliedButtons","divGetWinningProposalButtons","divAddVoter","Stack","direction","gap","Form","Group","Control","type","id","ref","input","divAddProposal","placeholder","divProposals","prop","tdButtonVote","Navbar","bg","Container","Brand","href","Card","Header","Body","Text","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.42709abd.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React from 'react'\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\n\nexport default class AddressesVoters extends React.Component {\n\n    constructor(props){\n        super(props);\n    }\n\n    render()\n    {\n        return(\n            <ListGroup variant=\"flush\">       \n            <ListGroup.Item>      \n              <Table hover>      \n                <tbody>\n                  {\n                    this.props.contractInformation && \n                    typeof (this.props.contractInformation.votersAdresses) !== 'undefined' && \n                    this.props.contractInformation.votersAdresses !== null &&\n                    this.props.contractInformation.votersAdresses.map((a) => <tr key={a.toString()}><td>{a}</td></tr>)\n                  }\n                </tbody>\n              </Table>\n            </ListGroup.Item>\n          </ListGroup>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport Accordion from 'react-bootstrap/Accordion';\nimport Alert from 'react-bootstrap/Alert';\nimport Card from 'react-bootstrap/Card';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Stack from 'react-bootstrap/Stack';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\n\nimport AddressesVoters from \"./component/AddressesVoters\";\n// import Proposals from \"./component/Proposals\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null,contractInformation: null, isWeb3Error:null };\n\n  componentDidMount = async () => {\n   \n    let isWeb3Error;\n    try {\n      \n      isWeb3Error = false;\n\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts (Metamask).\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the Voting contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];       \n\n      const instance = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n        \n      ); \n\n      // Set web3, accounts, and contract to the state, and then proceed with runInit \n      this.setState({ web3, accounts, contract: instance, isWeb3Error });\n    \n    } catch (error) {      \n      isWeb3Error = true\n      this.setState({isWeb3Error})\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );     \n      console.error(error);\n    }\n  };\n\n  //Initilazation\n  runInit = async() => {\n    const { contract , accounts} = this.state;\n\n    // Get contract info     \n    const contractOwner = await contract.methods.owner().call(); // The owner\n    \n    const currentWorkflowStatus = await contract.methods.getCurrentWorkflowStatus().call(); // current workflow status\n    const proposals = await contract.methods.getProposals().call(); // proposals \n    const votersAdresses = await contract.methods.getVotersAdresses().call(); // addresses on wihtelist\n    let winningProposal = null;\n\n    const connectedAccount = accounts[0];\n    const isOwner = connectedAccount === contractOwner ? true : false;\n   // const isVoter = connectedAccount === contractOwner ? true : false;\n   const isVoter = votersAdresses.indexOf(connectedAccount) > -1;\n   \n   if(currentWorkflowStatus == \"5\")\n   {\n     winningProposal = await contract.methods.getWinningProposal().call(); // the winning proposal\n   }\n\n    const isVoteOpen = currentWorkflowStatus == \"3\";\n\n   let  contractInformation = {\n        contractOwner: contractOwner,\n        currentWorkflowStatus: currentWorkflowStatus,\n        proposals: proposals,\n        votersAdresses: votersAdresses,\n        winningProposal: winningProposal,  \n        isVoter : isVoter,\n        isVoteOpen :  isVoteOpen     \n    };\n    \n    this.setState({ contractInformation });\n    this.setAccountInformation();\n    this.getUIWorkflowStatus();\n\n    // ********** Events management **********\n    window.ethereum.on('accountsChanged', (accounts) => this.handleAccountsChanged(accounts));\n    contract.events.WorkflowStatusChange().on('data', (event) => this.handleWorkflowStatusChange(event))\n                                          .on('error', (error) => console.error(error));\n    contract.events.VoterRegistered().on('data', (event) => this.handleVoterAdded(event))\n                                     .on('error', (error) => console.error(error));\n    contract.events.ProposalRegistered().on('data', (event) => this.handleProposalRegistered(event))\n                                        .on('error', (error) => console.error(error));     \n    contract.events.Voted().on('data', (event) => this.handleVoted(event))\n                           .on('error', (error) => console.error(error));\n  }\n\n  // Connected account (Need to be call at start and when user change metamastk account !)\n  setAccountInformation = async() => {\n    const { accounts, contract, contractInformation, web3 } = this.state;\n    const connectedAccount = accounts[0];\n    const isOwner = connectedAccount === contractInformation.contractOwner ? true : false;\n    let voterInformation = null;\n    let canVote = false;\n    let isRegistered = false;\n    let hasVoted = false; \n\n    const isVoter = contractInformation.votersAdresses.indexOf(connectedAccount) > -1;\n  \n    if (!isOwner && isVoter)\n    {\n      voterInformation = await contract.methods.getVoter(connectedAccount).call({ from: connectedAccount });\n    }\n\n     canVote = voterInformation && voterInformation.isRegistered && !voterInformation.hasVoted;\n     isRegistered = voterInformation && voterInformation.isRegistered;\n     hasVoted = voterInformation && voterInformation.hasVoted; \n   \n    let accountInformation = {\n      account: connectedAccount,\n      canVote: canVote,\n      hasVoted: hasVoted,\n      isOwner: isOwner,\n      isRegistered: isRegistered,     \n    };\n\n    this.setState({ accountInformation });   \n  };\n\n  getUIWorkflowStatus = async() => {\n    const { contractInformation } = this.state;\n\n    let UIWorkflowStatus\n    switch (contractInformation.currentWorkflowStatus) {\n      case '0':\n        UIWorkflowStatus = \"RegisteringVoters\";\n        break;\n      case '1':\n        UIWorkflowStatus = \"ProposalsRegistrationStarted\";\n        break;\n      case '2':\n        UIWorkflowStatus = \"ProposalsRegistrationEnded\";\n        break;\n      case '3':\n        UIWorkflowStatus = \"VotingSessionStarted\";\n        break;\n      case '4':\n        UIWorkflowStatus = \"VotingSessionEnded\";\n        break;\n      case '5':\n        UIWorkflowStatus = \"VotesTallied\";\n        break;\n    }\n    this.setState({ UIWorkflowStatus });\n\n  }\n\n\n  // ========== Handles events ==========\n  \n  // Account change on Metamask\n  handleAccountsChanged = async(newAccounts) => {\n    const { web3 } = this.state;\n    const reloadedAccounts = await web3.eth.getAccounts();   \n    this.setState({ accounts: reloadedAccounts });\n    this.setAccountInformation();\n  \n}\n\n  // Workflow change\n  handleWorkflowStatusChange = async(event) => {  \n    const { contract, contractInformation } = this.state;\n    contractInformation.currentWorkflowStatus = event.returnValues._newStatus;  \n    this.setState({ contractInformation });\n    this.setAccountInformation();\n    this.getUIWorkflowStatus();\n  }\n\n  //Voter added\n  handleVoterAdded = async(event) => {    \n    const { contract, contractInformation } = this.state;\n    contractInformation.votersAdresses = await contract.methods.getVotersAdresses().call(); \n    this.setState({ contractInformation });    \n    \n  }\n\n  //Proposal registred\n  handleProposalRegistered = async(event) => {    \n    this.listAllProposals();\n   \n  }\n\n  //Vote done\n  handleVoted = async(event) => {    \n    this.listAllProposals();\n  \n  }\n\n// ============== Contract interactions =================\n\n  // Add account\n  registeringUsers = async () => {\n    try {\n\n      const { accounts, contract } = this.state;\n      const address = this.address.value;\n      await contract.methods.addVoter(address.trim()).send({ from: accounts[0] }).then(response => {     \n        //console.log(response);  \n        this.address.value = '';\n      })\n    } catch (error) {\n         alert(error.message, \"Error\");\n    }\n  }\n\n  // Open registration\n  openProposaRegistration = async () => {\n    try {\n      const { accounts, contract } = this.state;\n      await contract.methods.startProposalsRegistering().send({ from: accounts[0] });\n    } catch (error) {\n      alert(error.message, \"Error\");\n    }\n  }\n\n  // Make a proposal\n  addProposal = async() => {\n    try{\n      const { accounts, contract } = this.state;\n      const description = this.proposal.value;\n\n      await contract.methods.addProposal(description).send({ from: accounts[0] }).then(response => {     \n        this.proposal.value = '';\n      });\n    }catch (error) {\n      alert(error.message, \"Error\");\n    }\n  }\n\n  //List all proposals\n  listAllProposals = async () => {\n    try {\n      const { contract, contractInformation } = this.state;\n      contractInformation.proposals = await contract.methods.getProposals().call();\n      \n      console.log(\"contractInformation.proposals=\");\n      console.log(contractInformation.proposals);\n\n      this.setState({ contractInformation });\n      this.setAccountInformation();\n    } catch (error) {\n      alert(error.message, \"Error\");\n    }\n  }\n\n  //Close proposal session\n  closeProposalRegistrationn = async () => {\n    try {\n      const { accounts, contract } = this.state;\n      await contract.methods.endProposalsRegistering().send({ from: accounts[0] }).then(response => {     \n           alert(\"Close Proposal\");\n      })\n    } catch (error) {\n      alert(error.message, \"Error\");\n    }\n  }\n\n  //Open vote session\n  startVotingSession = async() => {\n    try{\n      const { accounts, contract } = this.state;\n      await contract.methods.startVotingSession().send({ from: accounts[0] });\n\n    }catch (error) {\n      alert(error.message, \"Error\");\n    }\n  }\n\n  //Close vote session\n  endVotingSession = async () => {\n    try {\n      const { accounts, contract } = this.state;\n      await contract.methods.endVotingSession().send({ from: accounts[0] });\n    } catch (error) {\n      alert(error.message, \"Error\");\n    }\n  }\n\n  //Vote action\n  voteForProposal = async (index) => {\n    try {\n      //alert(index.target.value);\n      const { accounts, contract } = this.state;\n      await contract.methods.setVote(index.target.value).send({from: accounts[0]});\n    } catch (error) {\n      alert(error.message, \"Error\");\n \n    }\n  }\n\n  // Process vote result\n  endVotesTallied = async () => {\n    try {\n      const { accounts, contract } = this.state;\n      await contract.methods.endVotesTallied().send({ from: accounts[0] });\n    } catch (error) {\n      alert(error.message, \"Error\");\n \n    }\n  }  \n  \n  getWinningProposal = async () => {\n    try {\n      const {contract, contractInformation } = this.state;\n        await contract.methods.getWinningProposal().call().then(response => {    \n          contractInformation.winningProposal = response;\n          console.log(response);\n          this.setState({ contractInformation });\n     })\n    } catch (error) {\n      alert(error.message, \"Error\");\n \n    }\n  }\n\n// **************************************** Render ****************************************\n\n  render() {\n    const { accounts, accountInformation, contractInformation, UIWorkflowStatus } = this.state;\n    \n    //Loading\n    let divConnection = <Alert variant='info'>\n      Connect your Metamask\n    </Alert> \n\n    if (!this.state.web3) {\n      return divConnection\n    }\n    \n    // ======== DEFINE ALL DIV SECTIONS ========\n\n    //DIV User connection info \n    let divConnectionInfo = accountInformation ? \n      accountInformation.account + \" \": \n      \"Connect Wallet\"\n    \n    //Contract info\n    let isOwner = (accountInformation && accountInformation.isOwner)\n    if (contractInformation!=null)\n      isOwner= accounts[0] === contractInformation.contractOwner ? true : false;\n    \n    let isVoter = (accountInformation && accountInformation.canVote)    \n    let isRegistrationOpen = (UIWorkflowStatus!=null && UIWorkflowStatus === \"ProposalsRegistrationStarted\") ? true : false\n    let isVoteOpen = (UIWorkflowStatus!=null && UIWorkflowStatus === \"VotingSessionStarted\") ? true : false\n    let isVoteTallied = (UIWorkflowStatus!=null && UIWorkflowStatus === \"VotesTallied\") ? true : false\n    \n    //DIV owner\n    let divIsOwner = <span className='badge bg-success'>owner</span>\n\n    //DIV workflowStatus\n    let uiStatus = UIWorkflowStatus\n    \n    //DIV Admin buttons\n\n\nlet divOpenProposaRegistrationButtons =\n<>\n<Button onClick={this.openProposaRegistration}>\n   Open proposal registration\n   </Button> \n</>\n\nlet divCloseProposalRegistrationButtons =\n<>\n<Button onClick={this.closeProposalRegistrationn}>\n  Close proposal registration\n  </Button> \n</>\n\nlet divStartVotingSessionButtons =\n<>\n<Button onClick={this.startVotingSession}>\n Start Voting Session\n </Button> \n</>\n\nlet divEndVotingSessionButtons =\n<>\n <Button onClick={this.endVotingSession}>\n End Voting Session\n </Button> \n</>\n\nlet divEndVotesTalliedButtons =\n<>\n <Button onClick={this.endVotesTallied}>\n End Voting Session\n </Button> \n</>\n\nlet divGetWinningProposalButtons =\n<>\n <Button onClick={this.getWinningProposal}>\n Get Winner\n </Button> \n</>\n\n\n    //DIV Add Voters\n    let divAddVoter =  \n    <Stack direction=\"horizontal\" gap={3}>\n      <Form.Group>\n        <Form.Control type=\"text\" id=\"address\"\n          ref={(input) => { this.address = input }}\n        />\n      </Form.Group>\n      <Button onClick={this.registeringUsers}>Add new account</Button>\n      </Stack>\n    \n//DIV Add proposal\nlet divAddProposal = <Stack direction=\"horizontal\" gap={3}><Form className=\"w-50\"> \n<Form.Control type=\"text\" id=\"proposal\" placeholder=\"Your proposal\"\n  ref={(input) => { this.proposal = input }}\n/>        \n</Form>\n<Button onClick={this.addProposal}>Enregistrer</Button>\n</Stack>\n\n//DIV list proposals\nconst tdButtonVote = (index) => {\nif (isVoter && isVoteOpen) {\n  return <>\n           <Button onClick={ this.voteForProposal } value={index}>Voter</Button>&nbsp;\n         </>;\n}else {\n  return <></>;\n}\n}\n\nlet divProposals = <ListGroup>\n<ListGroup.Item>\n  <Table hover>\n    <tbody>\n      {contractInformation && contractInformation.proposals != null &&\n        contractInformation.proposals.map((prop, index) => \n        <tr key={index}>               \n        <td>#{index} - {prop.description} ({prop[1]} vote(s))</td>\n        <td>{tdButtonVote(index)}</td>\n        </tr>)\n      }\n    </tbody>\n  </Table>\n</ListGroup.Item>\n</ListGroup>\n   \n     // ======== DISPLAY RENDER ========\n    return (\n      <div className=\"App\">   \n        <Navbar bg=\"dark\" variant=\"dark\">\n          <Container>\n            <Navbar.Brand href=\"#\">VOTING DAPP - Defi Project #3</Navbar.Brand>\n              <Form className=\"d-flex navbar-brand\" > \n              <Button variant=\"outline-success\" onClick={this.runInit}>\n              {divConnectionInfo}\n              </Button>\n\n              </Form>\n          </Container>\n        </Navbar>        \n        \n        <Navbar>\n          <Container>\n            <Navbar.Brand href=\"#\">Status : {uiStatus}</Navbar.Brand>    \n            {uiStatus==\"RegisteringVoters\" && isOwner? divOpenProposaRegistrationButtons : \"\"}\n          {uiStatus==\"ProposalsRegistrationStarted\" && isOwner? divCloseProposalRegistrationButtons : \"\"}\n          {uiStatus==\"ProposalsRegistrationEnded\" && isOwner? divStartVotingSessionButtons : \"\"}\n          {uiStatus==\"VotingSessionStarted\" && isOwner? divEndVotingSessionButtons : \"\"}\n          {uiStatus==\"VotingSessionEnded\" && isOwner? divEndVotesTalliedButtons : \"\"}    \n          {uiStatus==\"VotesTallied\" && isOwner? divGetWinningProposalButtons : \"\"}    \n          </Container>\n        </Navbar>    \n\n          <Card key={1}>\n          <Card.Header> List voters    </Card.Header>\n          <Card.Body>\n            <Card.Text>\n              {isOwner && uiStatus == \"RegisteringVoters\" ? divAddVoter : \"\"}\n              <AddressesVoters contractInformation={this.state.contractInformation}></AddressesVoters>\n            </Card.Text>\n          \n          </Card.Body>\n        </Card>\n\n\n        <Card key={2}>\n            <Card.Header>Proposals</Card.Header>\n            <Card.Body>\n              <Card.Text>\n              {isVoter && isRegistrationOpen ? divAddProposal : \"\"}\n              {divProposals}\n              </Card.Text>\n            </Card.Body>\n          </Card>\n\n          <Card key={3}>\n            <Card.Header>Tally vote</Card.Header>\n            <Card.Body>\n              <Card.Text>            \n              {contractInformation !=null  && contractInformation.winningProposal? \n           contractInformation.winningProposal[0] + \"(\" + contractInformation.winningProposal[1] + \" votes)\": \"\"}  \n              </Card.Text>\n            </Card.Body>\n          </Card>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}